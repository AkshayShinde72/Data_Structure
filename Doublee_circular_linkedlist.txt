package linked_list;

import java.util.Scanner;


public class doubleecircularlinkedlist
{
     DNode root,last;
    
    void createList()
    {
        root=last=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void insert_left(int e)
    {
        DNode n=new DNode(e);
        if(root==null)
        { 
          root=last=n;
          root.left=root.right=n;
  		  last.left=last.right=n;
          
        }
        else
        {
            n.right=root;//1
            n.left=last;
            root.left=n;
            root=n;
            last.right=root;//3
        }
        System.out.println("Inserted");       
    }
    void insert_right(int e)
    {   DNode n=new DNode(e);
         if(root==null)
        { root=last=n;
          root.left=root.right=n;
		  last.left=last.right=n;
        }
        else
        {
           n.right=root;
           n.left=last;
           last.right=n;
           root.left=n;
           last=n;
           
           
        }
        System.out.println("Inserted");       
    }
     void delete_left()
    {
        if(root==null)
            System.out.println("Empty List");       
        else
        {
          
          if(root==last)//single node
          {root=last=null;}

          else
          {  DNode t=root;
        	  root=root.right;
             root.left=last;
             last.right=root;//3
             System.out.println(t.data+" deleted");  
          }
              
        }
    }
    void delete_right()
    {   if(root==null)
            System.out.println("Empty List");       
        else
        {
          DNode t=root;//1
          
          
          if(root==last)//only one node
          {root=last=null;}//manual reset}
          else
          { t=last;
            last=last.left;
			last.right=root;
			root.left=last;
          }
          System.out.println(t.data+" deleted");       
         }
    }
    
void print_list()
{  if(root==null)
            System.out.println("Empty List");       
   else
   {
       DNode t=root;
       do
       {
           System.out.print("| "+t.data+" |->");
           t=t.right;
       }while(t!=root);
   }   
}



void print_list_rev()
{  if(root==null)
        System.out.println("Empty List");       
else
{
   DNode t=last;
 
   do
   {
       System.out.print("| "+t.data+" |->");
       t=t.left;
   }while(t!=last);
}   
}
 public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         doubleecircularlinkedlist obj=new doubleecircularlinkedlist();
         obj.createList();
         int ch;
         do
         {
           System.out.println("\n1.Insert Left\n2.Insert Right\n3.Delete Left\n4.Delete Right\n5.Print List\n6.Print List Reverse\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                       System.out.println("\nEnter a number:");
                       int e=in.nextInt();
                       obj.insert_left(e);
                       break;
               case 2:
                       System.out.println("\nEnter a number:");
                       e=in.nextInt();
                       obj.insert_right(e);
                       break;    
               case 3:
                      obj.delete_left();
                      break;
               case 4:
                      obj.delete_right();
                      break;
              
               case 5:
                   System.out.println("\nelements in list:");
                   obj.print_list();
                   break;
               case 6:
                   System.out.println("\nelements in list:");
                   obj.print_list_rev();
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
}

package linked_list;

public class DNode {

	
	int data;
    DNode left,right;//self reference
    DNode(int data)
    {
        this.data=data;
        this.left=this.right=null;//address of other Node
    }
}





